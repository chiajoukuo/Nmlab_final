{"ast":null,"code":"var _jsxFileName = \"/home/jason/Desktop/nm_final/Nmlab_final/react/src/pages/BlockChainTest.js\";\nimport React from 'react'; //modify\n\nimport getWeb3 from \"../utils/getWeb3\";\nimport Picture from \"../../../build/contracts/Picture.json\";\n\nclass BlockChainTest extends React.Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = async () => {\n      try {\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Picture.networks[networkId];\n        const instance = new web3.eth.Contract(Picture.abi, deployedNetwork && deployedNetwork.address);\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        });\n      } catch (error) {\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      const data = new FormData(event.target);\n      console.log('Start');\n      await this.state.contract.methods.SetMessage(data.get('username')).send({\n        from: this.state.accounts[0]\n      });\n      console.log('after set');\n      console.log((await this.state.contract.methods.SayHello().call()));\n      console.log('after sayHello');\n    };\n\n    this.handleRegister = async event => {\n      this.setState({\n        texting: await this.state.contract.methods.SayHello().call()\n      });\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleRegister = this.handleRegister.bind(this);\n    this.state = {\n      texting: 'Hello world'\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Please Send Data!\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"Input String\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Enter Arbitrary String:\"), React.createElement(\"input\", {\n      id: \"username\",\n      name: \"username\",\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Send!\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, this.state.texting), React.createElement(\"button\", {\n      onClick: this.handleRegister,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Update!\"));\n  }\n\n}\n\nexport default BlockChainTest;","map":{"version":3,"sources":["/home/jason/Desktop/nm_final/Nmlab_final/react/src/pages/BlockChainTest.js"],"names":["React","getWeb3","Picture","BlockChainTest","Component","constructor","componentDidMount","web3","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","contract","error","alert","console","handleSubmit","event","preventDefault","data","FormData","target","log","state","methods","SetMessage","get","send","from","SayHello","call","handleRegister","texting","bind","render"],"mappings":"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","sourcesContent":["import React from 'react';\n//modify\nimport getWeb3 from \"../utils/getWeb3\";\nimport Picture from \"../../../build/contracts/Picture.json\"\n\nclass BlockChainTest extends React.Component {\n  constructor() {\n    super();\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleRegister = this.handleRegister.bind(this);\n    this.state = {texting: 'Hello world'};\n  }\n\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Picture.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Picture.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      this.setState({ web3, accounts, contract: instance });\n    } catch (error) {\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  handleSubmit = async(event) => {\n    event.preventDefault();\n    const data = new FormData(event.target);\n    console.log('Start');\n    await this.state.contract.methods.SetMessage(data.get('username')).send({ from: this.state.accounts[0]});\n    console.log('after set');\n    console.log(await this.state.contract.methods.SayHello().call());\n    console.log('after sayHello');\n  }\n\n\n  handleRegister= async (event) =>{\n   this.setState({texting: await this.state.contract.methods.SayHello().call()});\n  }\n\n\n  render() {\n    return (\n      <div>\n        <h1>Please Send Data!</h1>\n        <form onSubmit={this.handleSubmit}>\n          \n          <label htmlFor=\"Input String\">Enter Arbitrary String:</label>\n          <input id=\"username\" name=\"username\" type=\"text\" />\n          <input type=\"submit\" value=\"Send!\"/>\n        </form>\n        <h2>{this.state.texting}</h2>\n        <button onClick={this.handleRegister}>Update!</button>\n      </div>\n    );\n  }\n}\n\nexport default BlockChainTest;"]},"metadata":{},"sourceType":"module"}